// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RiversideFishhut.API.Data;

#nullable disable

namespace RiversideFishhut.API.Migrations
{
    [DbContext(typeof(RiversideFishhutDbContext))]
    partial class RiversideFishhutDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RiversideFishhut.API.Data.Admin", b =>
                {
                    b.Property<int>("AdminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdminId"), 1L, 1);

                    b.Property<string>("AdminAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminId");

                    b.ToTable("admins");

                    b.HasData(
                        new
                        {
                            AdminId = 1,
                            AdminAddress = "Admin@gmail.com",
                            AdminName = "Admin",
                            AdminPassword = "Admin123"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.BusinessHour", b =>
                {
                    b.Property<int>("BusinessHourId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BusinessHourId"), 1L, 1);

                    b.Property<string>("businessTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("dayOfWeek")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BusinessHourId");

                    b.ToTable("businessHours");

                    b.HasData(
                        new
                        {
                            BusinessHourId = 1,
                            businessTime = "09:00 - 17:00",
                            dayOfWeek = "Monday"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Main Dish",
                            FoodTypeId = 1,
                            TypeName = "2 PC Dinner"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.CategoryFoodType", b =>
                {
                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("FoodTypeId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId", "FoodTypeId");

                    b.HasIndex("FoodTypeId");

                    b.ToTable("CategoryFoodTypes");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            FoodTypeId = 1
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.FoodType", b =>
                {
                    b.Property<int>("TypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TypeId");

                    b.ToTable("foodTypes");

                    b.HasData(
                        new
                        {
                            TypeId = 1,
                            Description = "This type is for 2 Pc fish with 1 pack chip.",
                            TypeName = "2 PC Dinner"
                        },
                        new
                        {
                            TypeId = 2,
                            Description = "Description for FoodType2",
                            TypeName = "FoodType2"
                        },
                        new
                        {
                            TypeId = 3,
                            Description = "Description for FoodType3",
                            TypeName = "FoodType3"
                        },
                        new
                        {
                            TypeId = 4,
                            Description = "Description for FoodType4",
                            TypeName = "FoodType4"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Dine_in_price")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Take_out_price")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            Dine_in_price = 10,
                            ProductName = "2Pc Whitefish & Chips",
                            Take_out_price = 9
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            Dine_in_price = 12,
                            ProductName = "2Pc Cod & Chips",
                            Take_out_price = 11
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 1,
                            Dine_in_price = 14,
                            ProductName = "2Pc Haddock & Chips",
                            Take_out_price = 13
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 1,
                            Dine_in_price = 16,
                            ProductName = "2Pc Halibut & Chips",
                            Take_out_price = 15
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Staff", b =>
                {
                    b.Property<int>("StaffId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffId"), 1L, 1);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("roleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffId");

                    b.ToTable("staffs");

                    b.HasData(
                        new
                        {
                            StaffId = 1,
                            Description = "description1",
                            Password = "Password1",
                            StaffName = "Staff 1",
                            roleId = "Admin"
                        },
                        new
                        {
                            StaffId = 2,
                            Description = "description2",
                            Password = "Password2",
                            StaffName = "Staff 2",
                            roleId = "Staff"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.WebsiteInfo", b =>
                {
                    b.Property<int>("InfoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfoId"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OnlineOrderLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StoreName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InfoId");

                    b.ToTable("websiteInfos");

                    b.HasData(
                        new
                        {
                            InfoId = 1,
                            Address = "157 king st west Cambridge, ON, N3H 1B5",
                            Description = "This cozy restaurant specializes in traditional English fish and French fries, serving up freshly fried, crispy and flavorful fish sourced from local suppliers, and thick golden fries that make the perfect side dish.",
                            OnlineOrderLink = "https://www.skipthedishes.com/riverside-fish-hut?utm_source=riversidefishhutmenu.ca&utm_medium=microsites&utm_campaign=microsites",
                            Phone = "519-653-0788",
                            StoreName = "Riverside Fishhut"
                        });
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Category", b =>
                {
                    b.HasOne("RiversideFishhut.API.Data.FoodType", "foodType")
                        .WithMany("Categories")
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("foodType");
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.CategoryFoodType", b =>
                {
                    b.HasOne("RiversideFishhut.API.Data.Category", "Category")
                        .WithMany("CategoryFoodTypes")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RiversideFishhut.API.Data.FoodType", "FoodType")
                        .WithMany("CategoryFoodTypes")
                        .HasForeignKey("FoodTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FoodType");
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Product", b =>
                {
                    b.HasOne("RiversideFishhut.API.Data.Category", "category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("category");
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.Category", b =>
                {
                    b.Navigation("CategoryFoodTypes");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RiversideFishhut.API.Data.FoodType", b =>
                {
                    b.Navigation("Categories");

                    b.Navigation("CategoryFoodTypes");
                });
#pragma warning restore 612, 618
        }
    }
}
